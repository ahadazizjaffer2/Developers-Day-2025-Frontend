/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Tahsin R. Pulok (https://sketchfab.com/tahsinpulok)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/geometric-1-9ab680f2c53242a08e4f1bd3d5c554d7
Title: Geometric 1
*/

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useThree } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Material2: THREE.Mesh;
  };
  materials: {
    material: THREE.MeshStandardMaterial;
    edge_color000255: THREE.LineBasicMaterial;
  };
};

export function GeometricHyperbola(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/geometric_1.glb") as GLTFResult;
  const {scene} = useThree()
  // const mat =  new THREE.ShaderMaterial({
  //   uniforms: {
  //     uResolution: { value: windowDimensions },
  //     shadowMap: { value: null },
  //     lightPosition: { value: new THREE.Vector3(10, 10, 10) },
  //   },
  //   vertexShader: `
  //   void main() {
  //     vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);
  //     gl_Position = projectionMatrix * modelViewPosition; 
  //   }
  // `,

  //   fragmentShader: `

  //     uniform vec2 uResolution;

  //     float rand(vec2 co) {
  //         return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
  //     }


  //     void main() {
  //         vec3 dulColour = vec3(0.05, 0.01, 0.11);
  //         vec2 cUv = gl_FragCoord.xy / uResolution.xy;
  //         float opacityFactor = (cUv.x * cUv.y * 0.75) - (cUv.x * 0.25);
  //         vec3 opacity = mix(dulColour, vec3(0.88, 0.78, 1.0) * max(rand(cUv), 0.75), opacityFactor);
  //         gl_FragColor = vec4(opacity, 1.0); // Use FragColor instead of gl_FragColor
  //     }
  // `,
  // })
  scene.fog = new THREE.FogExp2('#0C021B',0.125)
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2,0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2.geometry}
          material={materials.material}
        >
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload("/geometric_1.glb");
